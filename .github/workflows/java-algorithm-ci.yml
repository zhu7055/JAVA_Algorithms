# 這個是這個工作流程的名稱，您可以隨意取，但建議取一個有意義的
name: Java 演算法程式碼自動化建構與執行

# 什麼時候觸發這個工作流程？
on:
  push:
    branches: [ "main" ] # 當程式碼被推送到 'main' 分支時，就執行這個工作流程
  pull_request:
    branches: [ "main" ] # 當有 Pull Request (PR) 到 'main' 分支時，也執行這個工作流程

# 這裡定義了一個「工作」(job)，叫做 'build_and_run'
jobs:
  build_and_run:
    runs-on: ubuntu-latest # 這個工作會在一個基於 Ubuntu 的虛擬機器上執行

    # 這是這個工作要執行的所有「步驟」(steps)
    steps:
    - uses: actions/checkout@v4 # 第一步：把您的 GitHub 程式碼下載到虛擬機器上
      name: 下載您的Repository程式碼

    - name: 設定 Java 開發環境 (JDK 17) # 第二步：安裝 Java 環境，這樣才能編譯和執行 Java
      uses: actions/setup-java@v4
      with:
        java-version: '17' # 這裡設定 Java 版本為 17。如果您程式碼是用其他版本寫的，可以改（例如 '11' 或 '21'）
        distribution: 'temurin' # 推薦使用的 Java 版本供應商

    - name: 編譯 Java 程式碼 # 第三步：使用 javac 命令來編譯您的 .java 檔案
      # 假設您的所有 .java 檔案都在您的 GitHub Repository 的根目錄或其下的子資料夾中。
      run: |
        mkdir -p bin # 先建立一個叫做 'bin' 的資料夾，用來放編譯出來的 .class 檔案
        # 這行指令的意思是：
        # 'find . -name "*.java"'：在目前資料夾 (.) 及其所有子資料夾中，找出所有副檔名是 .java 的檔案
        # '| xargs javac -d bin'：把找到的所有 .java 檔案，傳給 javac 命令來編譯，
        #                     並且把編譯好的 .class 檔案放到 'bin' 資料夾裡。
        #
        # 如果您的 .java 檔案全部都在一個特定的子資料夾裡，例如叫做 'src'
        # 那麼您應該把上面這行改成：
        # find src -name "*.java" -print | xargs javac -d bin
        find . -name "*.java" -print | xargs javac -d bin

    - name: 執行您的 Java 演算法程式碼 # 第四步：使用 java 命令來執行您編譯好的程式
      # 這是最重要，也最需要您修改的一步！
      # 您需要把 'your.package.MainClass' 替換成您程式中「真正要執行的那個類別的完整名稱」。
      # 這個類別就是您在 Eclipse 裡，通常會右鍵點擊它，然後選擇「Run As」->「Java Application」的那個類別。
      #
      # 完整名稱的意思是：如果您的 Java 檔案有 `package` 宣告，就要把 `package` 名稱也包含進去。
      #
      # 舉例來說：
      # 如果您的程式碼長這樣：
      #   // MyAlgorithm.java
      #   public class MyAlgorithm {
      #       public static void main(String[] args) {
      #           System.out.println("Hello Algorithm!");
      #       }
      #   }
      # 而且這個檔案沒有 `package` 宣告（或是在預設套件裡），那麼 'your.package.MainClass' 就應該是 'MyAlgorithm'。
      #
      # 如果您的程式碼長這樣：
      #   // com/example/algorithms/MainRunner.java
      #   package com.example.algorithms;
      #   public class MainRunner {
      #       public static void main(String[] args) {
      #           System.out.println("Running my algorithm!");
      #       }
      #   }
      # 那麼 'your.package.MainClass' 就應該是 'com.example.algorithms.MainRunner'。
      #
      # 找到您要執行的那個 Java 檔案。
      # 1. 看看檔案開頭有沒有 `package com.something.something;` 這樣的宣告。如果有，那就是它的套件名稱。
      # 2. 檔案的名稱（例如 `MainAlgorithm.java`），那麼類別名稱就是 `MainAlgorithm`。
      # 完整名稱就是「套件名稱.類別名稱」。如果沒有套件名稱，就只有「類別名稱」。
      run: java -cp bin your.package.MainClass # <--- 請務必在這裡修改成您實際的主類別名稱

    # 如果您的演算法程式碼有寫單元測試（例如用 JUnit），您可以考慮加這個步驟，但它會更複雜一些。
    # 如果沒有，可以先不用管下面的程式碼。
    # - name: 下載 JUnit 相關檔案 (如果有的話)
    #   if: always() # 即使前面的步驟失敗也嘗試執行，有助於完整錯誤報告
    #   run: |
    #     mkdir -p lib # 建立一個 'lib' 資料夾放下載的 jar 檔案
    #     # 這裡需要下載 JUnit 測試框架的 .jar 檔案。
    #     # 實際要下載哪些檔案，取決於您使用的 JUnit 版本和怎麼寫測試。
    #     # 舉例：wget https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.10.0/junit-platform-console-standalone-1.10.0.jar -P lib/

    # - name: 執行 JUnit 測試 (如果有的話)
    #   if: always()
    #   # 這行指令會用 JUnit 的執行器來跑測試。
    #   run: java -jar lib/junit-platform-console-standalone-1.10.0.jar -cp bin --scan-classpath
